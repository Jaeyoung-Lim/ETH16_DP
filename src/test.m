% test.m
%
% written by Dongho Kang
%
% 1. put .p files (postfix "DH") files in [your workspace] directory 
% 2. put data files in [your workspace]/data directory
% 3. run and check the results
%
% - only works if you implemented whole functions. 
% - check error tolerance
% - solution of stochastic shortest path problem could be different. 

%% clear workspace and command window
clear all;
close all;
clc;
rng(2)

%% define global problem parameters
% These variables may be used in your implementations. Do not add any
% additional global variable here for your implementations!
global p_c gamma_p pool_num_time_steps detected_additional_time_steps
p_c = 0.001;                        % probability of winning if randomly taking a picture
gamma_p = 0.5;                      % paparazzi camera strength
pool_num_time_steps = 4;            % number of time steps that pass if moving into pool or pond
detected_additional_time_steps = 6;	% additional time steps if detected and brought to gate

%% options
randomMapSize = [ ...
    8, 8; ...
    8, 8; ...
    9, 9; ...
    9, 9; ...
    10, 10; ...
    10, 15; ...
    10, 20; ...
    15, 15; ...
    15, 20; ...
    15, 30; ...
    20, 40; ...
    ]; % [N, M]

num_test = 7;  % map generated by DH
num_rand = size(randomMapSize, 1);  % random generated map

% error tolerance
tol_P = 1e-15;
tol_G = 1e-15;

tol_VI = 1e-4;
tol_PI = 1e-4;
tol_LP = 1e-4;

% visualization option 
vis_map = true;
vis_iter = false;

%% load examples 
% these example maps were generated by DH
disp('test map by DH: ')

for i=1:num_test
    disp(['iter num = ', num2str(i)]);
    
    datapath = sprintf('data/map%d.mat', i);
    load(datapath);
    
    if vis_map     
        disp(['display map. press any key to continue...', num2str(i)]);        
        PlotMap( 1, mapSize, map, gate, mansion, cameras );
        waitforbuttonpress;
    end
    
    % generate state space
    stateSpace = [];
    for n = 1 : size( map, 2 )
        for m = 1 : size( map, 1 )
            if map( m, n ) <= 0
                stateSpace = [ stateSpace; n, m ];
            end
        end
    end
    
    % generate control space
    controlSpace = [ 'n'; 'w'; 's'; 'e'; 'p' ];
    
    Check( stateSpace, controlSpace, ...
        map, gate, mansion, cameras, tol_P, tol_G, tol_VI, tol_PI, tol_LP);
end


%% random generation test
disp('random generated map: ')

for i=1:num_rand
    disp(['iter num = ', num2str(i)]);
    
    [ map, gate, mansion, cameras ] = GenerateMap( ...
        randomMapSize( i, 1 ), randomMapSize( i, 2 ) );
    
    if vis_map     
        disp(['display map. press any key to continue...', num2str(i)]);        
        PlotMap( 1, randomMapSize(i, :), map, gate, mansion, cameras );
        waitforbuttonpress;
    end
    
    % generate state space
    stateSpace = [];
    for n = 1 : size( map, 2 )
        for m = 1 : size( map, 1 )
            if map( m, n ) <= 0
                stateSpace = [ stateSpace; n, m ];
            end
        end
    end
    
    % generate control space
    controlSpace = [ 'n'; 'w'; 's'; 'e'; 'p' ];
    
    Check( stateSpace, controlSpace, ...
        map, gate, mansion, cameras, tol_P, tol_G, tol_VI, tol_PI, tol_LP);
end